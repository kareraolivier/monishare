name: Deploy to S3

on:
  push:
    branches:
      - main
      - staging

env:
  TEAM: ${{ vars.TEAM }}
  VITE_API_URL: ${{ vars.VITE_API_URL }}
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
            node_modules
            ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: npm ci

    - name: Build React App
      run: npm run build

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Set Bucket Name
      id: set_bucket
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "::set-output name=BUCKET_NAME::prod.$TEAM.monishare.ojemba"
        else
          echo "::set-output name=BUCKET_NAME::staging.$TEAM.monishare.ojemba"
        fi
      env:
        TEAM: ${{ env.TEAM }}

    - name: Create S3 Bucket If Not Exists
      run: |
          if ! aws s3api head-bucket --bucket $BUCKET_NAME 2>&1 | grep -q "Not Found"; then
            echo "Bucket exists"
          else
            aws s3api create-bucket --bucket $BUCKET_NAME --region eu-central-1 --create-bucket-configuration LocationConstraint=eu-central-1
            aws s3 website s3://$BUCKET_NAME/ --index-document index.html
            
            # Set CORS policy
            echo '{
              "CORSRules": [
                {
                  "ID": "string",
                  "AllowedHeaders": ["*"],
                  "AllowedMethods":  [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE"
                  ],
                  "AllowedOrigins": ["*"],
                  "ExposeHeaders": [],
                  "MaxAgeSeconds": 3000
                }
              ]
          }' > cors.json
            aws s3api put-bucket-cors --bucket $BUCKET_NAME --cors-configuration file://cors.json
          fi
      env:
        BUCKET_NAME: ${{ steps.set_bucket.outputs.BUCKET_NAME }}
        
    - name: Deactivate Block Public Access
      run: |
        aws s3api put-public-access-block \
          --bucket $BUCKET_NAME \
          --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
      env:
        BUCKET_NAME: ${{ steps.set_bucket.outputs.BUCKET_NAME }}
  
    - name: Set S3 Bucket Policy
      run: |
          # Create bucket policy
          echo '{
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "AWS": "*"
                      },
                      "Action": "s3:GetObject",
                      "Resource": "arn:aws:s3:::'$BUCKET_NAME'/*"
                  }
              ]
          }' > bucket_policy.json
  
          # Apply bucket policy
          aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy file://bucket_policy.json
      env:
        BUCKET_NAME: ${{ steps.set_bucket.outputs.BUCKET_NAME }}
  
    - name: Deploy to S3
      run: |
          aws s3 sync dist/ s3://$BUCKET_NAME/ --delete
      env:
          BUCKET_NAME: ${{ steps.set_bucket.outputs.BUCKET_NAME }}
  
